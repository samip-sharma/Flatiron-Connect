{"version":3,"sources":["component/Login.js","component/Register.js","constants/constants.js","redux/type.js","redux/action.js","component/Navbar.js","component/UpcommingEvents.js","component/Calender.js","component/ChatBoxForUser.js","component/GlobalChat.js","component/Chat.js","component/Sidebar.js","component/Home.js","component/FriendList.js","component/ProfilPic.js","component/Profile.js","component/Setting.js","component/Admin.js","component/MyMode.js","App.js","serviceWorker.js","redux/reducer.js","index.js"],"names":["Login","state","user_name","password","handleInputChange","e","setState","target","name","value","handleLoginSubmit","preventDefault","props","localStorage","token","this","history","push","className","type","infinite","onSubmit","onChange","placeholder","required","onClick","React","Component","handleRegisterSubmit","HEADERS","API","LOGIN","REGISTER","ALL_TWEETS","FRIEND_LIST","GET_MOD_EVENTS","ADD_NEW_EVENT","ADD_NEW_TWEET","GET_MOD_FRIENDS","GET_ALL_MOD","GET_MY_MOD","GET_CURRENT_USER","EDIT_CURRENT_USER","CREATE_NEW_MOD","GET_PENDING_MOD_USER","ACCEPT_PENDING_USER","REJECT_PENDING_USER","ALL_USERS","ADD_FRIEND","REMOVE_FRIEND","TROGGLE_WORKING","ADD_BLOG","GET_LOGGED_IN_USER","GET_TWO_USERS_CHAT","SEND_USER_MESSAGE","GET_GLOBAL_MESSAGE","SEND_GLOBAL_MESSAGE","GET_ALL_MOD_TWEETS","CREATE_MOD_TWEET","GET_ALL_IMAGE","CHANGE_PROFILE_PIC","getAllFriends","dispatch","fetch","current_user","then","resp","json","data","error","payload","getAllMod","getCurrentUser","clicked_user","getLoggedInUser","sendGlobalMessage","global_message","Navbar","clear","to","href","loggedIn_user","admin","handleLogout","mapDispatchToProps","connect","UpcommingEvents","eventDate","nowDate","String","Date","split","slice","join","arr","all_mod_events","filter","event","start","getTime","map","title","user_mod","accepted","length","localizer","momentLocalizer","moment","Calender","start_date","end_date","start_time","end_time","addNewEvent","handleFormChange","componentDidMount","getModEvents","eventDatesHelper","a","Fragment","getNow","events","style","height","width","textAlign","alignSelf","ChatBoxForUser","text","user","loop","setInterval","getChat","handleChatSubmit","sendUserMessage","chat","id","handleChatInputChange","clearInterval","objDiv","document","getElementById","scrollBottom","scrollHeight","querySelector","scrollTop","messageArr","two_users_messages","message","sender","GlobalChat","getGlobalMessage","handleMessageSubmit","method","headers","body","JSON","stringify","user_id","global_messages","key","Chat","clicked","global","handleGlobalClick","handleUserClick","getTwoUsersChat","color","all_friends","active_user","src","alt","two_users_chat","receiver_id","chat_id","Sidebar","image","url","Home","content","handlePostSubmit","addNewTweet","allTweets","homeTweets","all_tweets","tweet","reverse","FriendList","handleAddFriend","addFriend","handleRemoveFriend","removeFriend","getAllUsers","arrOfFriendsId","notfriend","all_users","includes","parseInt","following_id","being_followed_id","following","being_followed","catch","console","log","ProfilPic","modal14","toggle","nr","modalNumber","handlePpChange","changeProfilePic","getAllImage","all_image","margin","padding","isOpen","centered","image_id","Profile","checked","ppChange","handleCheckboxChange","troggleWorking","handleBlogFormInput","handleBlogFormSubmit","addBlog","handleProfileChangeClick","handleProfileChangeClose","userTweet","userBlogs","working_at","working","tweets","blogs","blog","i","Setting","mod_id","handleSelectChange","handleSubmit","editCurrentUser","alert","all_mod","mod","getMyMod","my_mod","Admin","mod_name","handleInput","createNewMod","handleUserAccept","acceptModUser","handleUserReject","rejectModUser","getPendingModUser","all_pending_user","rounded","MyMode","createModTweets","getModFriends","getAllModTweets","modName","all_mod_friends","all_mod_tweets","modId","App","login","register","processEventDates","end","allDay","exact","path","render","routerProps","login_state","cookie","register_state","Boolean","window","location","hostname","match","initialState","mod_tweets","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","action","applyMiddleware","thunk","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5f923ac5.chunk.js","sourcesContent":["import React from 'react'\nimport { MDBAnimation } from \"mdbreact\";\n\nexport default class Login extends React.Component{\n    state={\n        user_name:'',\n        password:''\n    }\n    handleInputChange=(e)=>{\n        this.setState({\n            [e.target.name]:e.target.value\n        })\n    }\n\n    handleLoginSubmit=(e)=>{\n        e.preventDefault()\n        this.props.handleLoginSubmit(this.state)\n    }\n\n    render(){\n        if (localStorage.token) {this.props.history.push('/home')}\n        return(\n            <div className=\"login-container\">\n                <h3 className=\"register-login-heading\">\n                <MDBAnimation type=\"bounce\" infinite> \n                 Login\n                </MDBAnimation>\n                    </h3>\n                <div className=\"login-form\">\n                <form onSubmit={ this.handleLoginSubmit }>\n                    <input onChange={ this.handleInputChange } value={ this.state.user_name } type=\"text\" placeholder=\"User Name\" name=\"user_name\" required/>\n                    <input onChange={ this.handleInputChange } value={ this.state.password }  type=\"password\" placeholder=\"Password\" name=\"password\" required/>\n                    <input type=\"submit\" value=\"submit\"/>\n                    <button className=\"login-register\" onClick={()=>{this.props.history.push('/register')}}>Register</button>\n                    </form>\n            \n                \n                </div>\n            </div>\n        )\n    }\n}","import React from 'react'\nimport { MDBAnimation } from \"mdbreact\";\n\n\n\n\nexport default class Login extends React.Component{\n    state={\n        name:'',\n        user_name:'',\n        password:'',\n    }\n    handleInputChange=(e)=>{\n        this.setState({\n            [e.target.name]:e.target.value\n        })\n    }\n\n    handleLoginSubmit=(e)=>{\n        e.preventDefault()\n        this.props.handleRegisterSubmit(this.state)\n        this.props.history.push(\"/home\")\n        \n        \n    }\n\n    render(){\n        return(\n            <div className=\"register-container\">\n                <h3 className=\"register-login-heading\">\n                <MDBAnimation type=\"bounce\" infinite> \n                 Register\n                </MDBAnimation>\n                </h3>\n                <div className=\"register-form\">\n                    <form onSubmit={ this.handleLoginSubmit }>\n                    <input onChange={ this.handleInputChange } value={ this.state.name } type=\"text\" placeholder=\"Name\" name=\"name\" required/>\n                    <input onChange={ this.handleInputChange } value={ this.state.user_name } type=\"text\" placeholder=\"User Name\" name=\"user_name\" required/>\n                    <input onChange={ this.handleInputChange } value={ this.state.password }  type=\"password\" placeholder=\"Password\" name=\"password\" required/>\n                    <input type=\"submit\" value=\"submit\"/>\n                    <button className=\"login-register\" onClick={()=>{this.props.history.push('/')}}>LOGIN</button>\n                    </form>\n                    </div>\n            </div>\n        )\n    }\n}\n","\nexport const HEADERS={\n\"Accepts\":\"application/json\",\n\"Content-Type\":\"application/json\"}\n\n\n\n\n\n// export const API_WS_ROOT=\"ws://localhost:3000/cable\"\n// export const API=\"http://localhost:3000/\"\n\n\nexport const API_WS_ROOT=\"ws://flatiron-connect.herokuapp.com/cable\"\nexport const API=\"https://flatiron-connect.herokuapp.com/\"","export const LOGIN = \"LOGIN\"\nexport const REGISTER = \"REGISTER\"\nexport const ALL_TWEETS = \"ALL_TWEETS\"\nexport const FRIEND_LIST = 'FRIEND_LIST'\nexport const GET_MOD_EVENTS='GET_MOD_EVENTS'\nexport const ADD_NEW_EVENT=\"ADD_NEW_EVENT\"\nexport const ADD_NEW_TWEET=\"ADD_NEW_TWEET\"\nexport const GET_MOD_FRIENDS=\"GET_MOD_FRIENDS\"\nexport const GET_ALL_MOD=\"GET_ALL_MOD\"\nexport const GET_MY_MOD=\"GET_MY_MOD\"\nexport const GET_CURRENT_USER=\"GET_CURRENT_USER\"\nexport const EDIT_CURRENT_USER=\"EDIT_CURRENT_USER\"\nexport const CREATE_NEW_MOD= \"CREATE_NEW_MOD\"\nexport const GET_PENDING_MOD_USER=  \"GET_PENDING_MOD_USER\"\nexport const ACCEPT_PENDING_USER= \"ACCEPT_PENDING_USER\"\nexport const REJECT_PENDING_USER=\"REJECT_PENDING_USER\"\nexport const ALL_USERS=\"ALL_USERS\"\nexport const ADD_FRIEND=\"ADD_FRIEND\"\nexport const REMOVE_FRIEND=\"REMOVE_FRIEND\"\nexport const TROGGLE_WORKING=\"TROGGLE_WORKING\"\nexport const ADD_BLOG=\"ADD_BLOG\"\nexport const GET_LOGGED_IN_USER=\"GET_LOGGED_IN_USER\"\nexport const GET_TWO_USERS_CHAT=\"GET_TWO_USERS_CHAT\"\nexport const SEND_USER_MESSAGE=\"SEND_USER_MESSAGE\"\nexport const GET_GLOBAL_MESSAGE=\"GET_GLOBAL_MESSAGE\"\nexport const SEND_GLOBAL_MESSAGE=\"SEND_GLOBAL_MESSAGE\"\nexport const GET_ALL_MOD_TWEETS=\"GET_ALL_MOD_TWEETS\"\nexport const CREATE_MOD_TWEET=\"CREATE_MOD_TWEET\"\nexport const GET_ALL_IMAGE=\"GET_ALL_IMAGE\"\nexport const CHANGE_PROFILE_PIC=\"CHANGE_PROFILE_PIC\"\n\n","import {HEADERS,API} from '../constants/constants'\nimport {LOGIN,REGISTER,ALL_TWEETS,FRIEND_LIST,GET_MOD_EVENTS,ADD_NEW_EVENT,ADD_NEW_TWEET,GET_MOD_FRIENDS,GET_ALL_MOD,GET_MY_MOD,GET_CURRENT_USER,EDIT_CURRENT_USER,CREATE_NEW_MOD,GET_PENDING_MOD_USER,ACCEPT_PENDING_USER,REJECT_PENDING_USER,ALL_USERS,ADD_FRIEND,REMOVE_FRIEND,TROGGLE_WORKING,ADD_BLOG,GET_LOGGED_IN_USER,GET_TWO_USERS_CHAT,SEND_USER_MESSAGE,GET_GLOBAL_MESSAGE,SEND_GLOBAL_MESSAGE,GET_ALL_MOD_TWEETS,CREATE_MOD_TWEET,GET_ALL_IMAGE,CHANGE_PROFILE_PIC} from './type'\n\nexport const login=(login_state)=>{\n    return function(dispatch){\n        fetch(API+\"/tokens\",{\n            method:\"POST\",\n            headers:HEADERS,\n            body:JSON.stringify(\n                login_state\n            )\n        })\n        .then(resp=>resp.json())\n        .then(data=>{\n            if(data.token){\n            localStorage.token=data.token\n            document.cookie=`${localStorage.token}`\n            localStorage.current_user=data.user_id\n            localStorage.clicked_user=data.user_id\n            localStorage.mod_id=data.mod_id\n            dispatch({\"type\":LOGIN,payload:data})\n            }\n            })\n    }\n}\n\nexport const register=(register_state)=>{\n    return function(dispatch){\n        fetch(API+\"/users\",{\n            method:\"POST\",\n            headers:HEADERS,\n            body:JSON.stringify(\n                register_state\n            )\n        })\n        .then(resp=>resp.json())\n        .then(data=>{\n            if(!data.error){dispatch({\"type\":REGISTER,payload:data})}\n            })\n    }\n}\n\n\nexport const allTweets=()=>{\n    return function(dispatch){\n        fetch(API+\"/tweets\")\n        .then(resp=>resp.json())\n        .then(data=>{if(!data.error){\n            if(!data.error){\n                dispatch({\"type\":ALL_TWEETS,payload:data})\n            }\n        }})\n    }\n}\n\nexport const getAllFriends=()=>{\n    return function(dispatch){\n        fetch(API+`/follows/${localStorage.current_user}`)\n        .then(resp=>resp.json())\n        .then(data=>{\n            if(!data.error){\n                dispatch({\"type\":FRIEND_LIST,payload:data})\n            }\n        })\n    }\n}\n\nexport const getModEvents=()=>{\n    return function(dispatch){\n        fetch(API+`/mod_events/${localStorage.mod_id}`)\n        .then(resp=>resp.json())\n        .then(data=>{\n            if(!data.error){\n                dispatch({\"type\":GET_MOD_EVENTS,payload:data})\n            }\n        })\n    }\n}\n\nexport const addNewEvent=(state)=>{\n    return function(dispatch){\n        fetch(API+\"/mod_events\",{\n            method:\"POST\",\n            headers:{\n              ...HEADERS,\n              \"Authorization\":localStorage.token\n            },\n            body:JSON.stringify(\n              {...state,\n              mod_id:localStorage.mod_id,\n              user_id:localStorage.current_user}\n            )\n          })\n          .then(resp=>resp.json())\n          .then(data=>{\n            if(!data.error){\n                dispatch({\"type\":ADD_NEW_EVENT,payload:data})\n            }\n        })\n    }\n}\n\n\nexport const addNewTweet=(state)=>{\n    return function(dispatch){\n        fetch(API+\"/tweets\",{\n            method:\"POST\",\n            headers:{\n              ...HEADERS,\n              \"Authorization\":localStorage.token\n            },\n            body:JSON.stringify(\n              {...state,\n              user_id:localStorage.current_user}\n            )\n          })\n          .then(resp =>resp.json())\n          .then(data=>{\n            if(!data.error){\n                dispatch({\"type\":ADD_NEW_TWEET,payload:data})\n            }\n        })\n    }\n}\n\n\nexport const getModFriends=()=>{\n    return function(dispatch){\n        fetch(API+`/user_mods/${localStorage.mod_id}`)\n        .then(resp=>resp.json())\n        .then(data=>{\n            if(!data.error){\n                dispatch({\"type\":GET_MOD_FRIENDS,payload:data})\n            }\n        })\n    }\n}\n\n\n\nexport const getAllMod=()=>{\n    return function(dispatch){\n        fetch(API+`/mods`)\n        .then(resp=>resp.json())\n        .then(data=>{\n            if(!data.error){\n                dispatch({\"type\":GET_ALL_MOD,payload:data})\n            }\n        })\n    }\n}\n\n\n\nexport const getMyMod=()=>{\n    return function(dispatch){\n        fetch(API+`/mods/${localStorage.mod_id}`)\n        .then(resp=>resp.json())\n        .then(data=>{\n            if(!data.error){\n                dispatch({\"type\":GET_MY_MOD,payload:data})\n            }\n        })\n    }\n}\n\n\nexport const getCurrentUser=()=>{\n    return function(dispatch){\n        fetch(API+`/users/${localStorage.clicked_user}`)\n        .then(resp=>resp.json())\n        .then(data=>{\n            // debugger\n            if(!data.error){\n                dispatch({\"type\":GET_CURRENT_USER,payload:data})\n            }\n        })\n    }\n}\n\n\n\nexport const getLoggedInUser=()=>{\n    return function(dispatch){\n        fetch(API+`/users/${localStorage.current_user}`)\n        .then(resp=>resp.json())\n        .then(data=>{\n            if(!data.error){\n                dispatch({\"type\":GET_LOGGED_IN_USER,payload:data})\n            }\n        })\n    }\n}\n\n\n\nexport const editCurrentUser=(state)=>{\n    return function(dispatch){\n        fetch(API+`/users/${localStorage.loggedIn_user}`,{\n            method:\"PATCH\",\n            \"headers\":HEADERS,\n            body:JSON.stringify(\n                state\n            )\n        })\n        .then(resp=>resp.json())\n        .then(data=>{\n            if(!data.error){\n                // debugger\n                localStorage.mod_id=state.mod_id\n                dispatch({\"type\":EDIT_CURRENT_USER,payload:data})\n            }\n        })\n    }\n}\n\n\n\n\nexport const createNewMod=(state)=>{\n    return function(dispatch){\n        fetch(API+\"/mods\",{\n            method:\"POST\",\n            headers:{\n              ...HEADERS,\n              \"Authorization\":localStorage.token\n            },\n            body:JSON.stringify(\n              {...state}\n            )\n          })\n          .then(resp =>resp.json())\n          .then(data=>{\n            if(!data.error){\n                dispatch({\"type\":CREATE_NEW_MOD,payload:data})\n            }\n        })\n    }\n}\n\n\n\n\nexport const getPendingModUser=()=>{\n    return function(dispatch){\n        fetch(API+`/pendingModUser`)\n        .then(resp=>resp.json())\n        .then(data=>{\n            if(!data.error){\n                // debugger\n                dispatch({\"type\":GET_PENDING_MOD_USER,payload:data})\n            }\n        })\n    }\n}\n\n\nexport const acceptModUser=(body)=>{\n    return function(dispatch){\n        fetch(API+\"/acceptModUser\",{\n            method:\"POST\",\n            headers:{\n              ...HEADERS,\n              \"Authorization\":localStorage.token\n            },\n            body:JSON.stringify(\n              {...body}\n            )\n          })\n          .then(resp =>resp.json())\n          .then(data=>{\n            if(!data.error){\n                dispatch({\"type\":ACCEPT_PENDING_USER,payload:data})\n            }\n        })\n    }\n}\n\n\n\nexport const rejectModUser=(body)=>{\n    return function(dispatch){\n        fetch(API+\"/rejectModUser\",{\n            method:\"POST\",\n            headers:{\n              ...HEADERS,\n              \"Authorization\":localStorage.token\n            },\n            body:JSON.stringify(\n              {...body}\n            )\n          })\n          .then(resp =>resp.json())\n          .then(data=>{\n            if(!data.error){\n                dispatch({\"type\":REJECT_PENDING_USER,payload:data})\n            }\n        })\n    }\n}\n\n\nexport const getAllUsers=()=>{\n    return function(dispatch){\n        fetch(API+\"/users\")\n        .then(resp=>resp.json())\n        .then(data=>{\n            if(!data.error){dispatch({\"type\":ALL_USERS,payload:data})}\n            })\n    }\n}\n\n\nexport const addFriend=(following_id,being_followed_id)=>{\n    return function(dispatch){\n        fetch(API+\"/createFollows\",{\n            method:\"POST\",\n            headers:{\n              ...HEADERS,\n              \"Authorization\":localStorage.token\n            },\n            body:JSON.stringify(\n              {following:following_id,\n               being_followed:being_followed_id}\n            )\n          })\n          .then(resp =>resp.json())\n          .then(data=>{\n            if(!data.error){\n                dispatch({\"type\":ADD_FRIEND,payload:data})\n            }\n        })\n    }\n}\n\n\n\nexport const removeFriend=(following_id,being_followed_id)=>{\n    return function(dispatch){\n        fetch(API+\"/removeFollows\",{\n            method:\"POST\",\n            headers:{\n              ...HEADERS,\n              \"Authorization\":localStorage.token\n            },\n            body:JSON.stringify(\n              {following:following_id,\n             being_followed:being_followed_id}\n            )\n          })\n          .then(resp =>resp.json())\n          .then(data=>{\n            if(!data.error){\n                dispatch({\"type\":REMOVE_FRIEND,payload:data})\n            }\n        })\n        .catch(console.log)\n    }\n}\n\nexport const troggleWorking=()=>{\n    return function(dispatch){\n        fetch(API+`/working/${localStorage.clicked_user}`)\n        .then(resp=>resp.json())\n        .then(data=>{\n            if(!data.error){\n                dispatch({\"type\":TROGGLE_WORKING,payload:data})\n            }\n        })\n    }\n}\n\n\nexport const addBlog=(title,url)=>{\n    return function(dispatch){\n        fetch(API+\"/blogs\",{\n            method:\"POST\",\n            headers:{\n              ...HEADERS,\n              \"Authorization\":localStorage.token\n            },\n            body:JSON.stringify(\n             { user_id:localStorage.current_user,\n                title:title,\n                url:url\n              }\n            )\n          })\n          .then(resp =>resp.json())\n          .then(data=>{\n            if(!data.error){\n                dispatch({\"type\":ADD_BLOG,payload:data})\n            }\n        })\n    }\n}\n\n\n\nexport const getTwoUsersChat=(receiver_id)=>{\n    return function(dispatch){\n        fetch(API+`/twoUsersChat/${localStorage.current_user}/${receiver_id}`)\n        .then(resp=>resp.json())\n        .then(data=>{\n            if(!data.error){\n                dispatch({\"type\":GET_TWO_USERS_CHAT,payload:data})\n            }\n        })\n    }\n}\n\nexport const sendUserMessage=(id,text)=>{\n    return function(dispatch){\n        fetch(API+`/two_users_messages/`,{\n            method:\"POST\",\n            headers:{\n              ...HEADERS,\n              \"Authorization\":localStorage.token\n            },\n            body:JSON.stringify(\n             { chat_id:id,\n                text:text,\n                user_id:localStorage.current_user\n              }\n            )\n          })\n        .then(resp=>resp.json())\n        .then(data=>{ \n            if(!data.error){\n                dispatch({\"type\":SEND_USER_MESSAGE,payload:data})\n            }\n        })\n    }\n}\n\n\n\n\nexport const getGlobalMessage=()=>{\n    return function(dispatch){\n        fetch(API+\"/global_messages\")\n        .then(resp=>resp.json())\n        .then(data=>{\n            if(!data.error){\n                dispatch({\"type\":GET_GLOBAL_MESSAGE,payload:data})\n            }\n        })\n    }\n}\n\n\n// result adding to state after we\n//  get data from web sockets\n\nexport const sendGlobalMessage=(data)=>{\n    return function(dispatch){\n        dispatch({ \"type\" :SEND_GLOBAL_MESSAGE,payload:data.global_message })\n       \n    }\n}\n\n\n\n\n\nexport const getAllModTweets=(modId)=>{\n    return function(dispatch){\n        fetch(API+`/mod_tweets/${modId}`)\n        .then(resp=>resp.json())\n        .then(data=>{\n            if(!data.error){\n                dispatch({\"type\":GET_ALL_MOD_TWEETS,payload:data})\n            }\n        })\n    }\n}\n\n\n\n\n\n\nexport const createModTweets=(content)=>{\n    return function(dispatch){\n        fetch(API+`/mod_tweets`,{\n            method:\"POST\",\n            headers:{\n              ...HEADERS,\n              \"Authorization\":localStorage.token\n            },\n            body:JSON.stringify(\n             { mod_id:localStorage.mod_id,\n               user_id:localStorage.current_user,\n               content:content\n              }\n            )\n          })\n        .then(resp=>resp.json())\n        .then(data=>{\n            if(!data.error){\n                dispatch({\"type\":CREATE_MOD_TWEET,payload:data})\n            }\n        })\n    }\n}\n\n\nexport const getAllImage=()=>{\n    return function(dispatch){\n        fetch(API+`/getAllImage`)\n        .then(resp=>resp.json())\n        .then(data=>{\n            if(!data.error){\n                dispatch({\"type\":GET_ALL_IMAGE,payload:data})\n            }\n        })\n    }\n}\n\n\n\nexport const changeProfilePic=(image_id)=>{\n    return function(dispatch){\n        fetch(API+`/changeProfilePic`,{\n            method:\"POST\",\n            headers:{\n              ...HEADERS,\n              \"Authorization\":localStorage.token\n            },\n            body:JSON.stringify(\n             {\n               user_id:localStorage.current_user,\n               image_id:image_id\n              }\n            )\n          })\n        .then(resp=>resp.json())\n        .then(data=>{\n            // debugger\n            if(!data.error){\n                dispatch({\"type\":CHANGE_PROFILE_PIC,payload:data})\n            }\n        })\n    }\n}","import React from \"react\"\nimport {Link} from 'react-router-dom'\nimport {connect} from 'react-redux'\nimport {getLoggedInUser,getCurrentUser} from '../redux/action'\n\n\n\nclass Navbar extends React.Component {\n    handleLogout(){\n        localStorage.clear()\n    }\n\n    componentDidMount(){\n        this.props.getLoggedInUser()\n    }\n\n    render(){\n        return(\n                <div className=\"navbar-container\">\n                    <Link to=\"/home\" >Home</Link>\n                    <Link to=\"/calender\" >Calender</Link>\n                    <Link to=\"/friends\" >Friends</Link>\n                    <Link to=\"/mymod\" >My Mod</Link>\n                    <a onClick={()=>localStorage.clicked_user=localStorage.current_user} href=\"/profile\" >Profile</a>\n                    <Link to=\"/setting\" >Setting</Link>\n                    {this.props.loggedIn_user.admin ?\n                    <Link to=\"/admin\" >AdminSection</Link>\n                    :\n                    null\n\n                    }\n                    <Link to=\"/\" onClick={this.handleLogout} >Logout</Link>\n                </div>\n        )\n    }\n}\n\n\nconst mapStateToProps=(state)=>{\n    return {\n        loggedIn_user:state.loggedIn_user,\n        current_user:state.current_user\n    }\n  }\n\n\n  const mapDispatchToProps = {\n    getLoggedInUser:getLoggedInUser,\n    getCurrentUser:getCurrentUser\n  }\n  export default connect(mapStateToProps,mapDispatchToProps)(Navbar)\n","import React from 'react'\nimport {connect} from 'react-redux'\n\n\n class UpcommingEvents extends React.Component{\n    render(){\n        let eventDate\n        let nowDate =String(new Date()).split(\" \").slice(1,5).join(\" \")\n        let arr=this.props.all_mod_events.filter((event)=>{\n            eventDate=event.start.split(\" \" ).slice(0,2).join(\" \")\n            return new Date(eventDate).getTime() >  new Date(nowDate).getTime()\n        })\n\n        arr=arr.map((event)=>{\n            return <li>{event.title}-{event.start}</li>\n        })\n        return(\n            <div className=\"upcomming-events\">\n                {this.props.loggedIn_user.user_mod && this.props.loggedIn_user.user_mod.accepted?\n                <div> \n                    <h4>Upcomming Events</h4>\n                    <br />\n                    <ul>\n                    {arr.length>0? arr :\"No upcomming events\"}\n                    </ul>\n                </div>\n                :        \n                \"Not accepted to Mod yet\"   \n                }\n            </div>\n        )\n    }\n}\n\n\nconst mapStateToProps=(state)=>{\n    return {\n      all_mod_events:state.all_mod_events,\n      loggedIn_user:state.loggedIn_user\n    }\n  }\n  \n  \n  export default connect(mapStateToProps)(UpcommingEvents)\n  ","import React, { Component } from \"react\";\n// import {HEADERS,API} from '../constants/constants'\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport Navbar from './Navbar'\nimport UpcommingEvents from \"./UpcommingEvents\";\n// import addNewEvent from '../redux/action'\n\n// import events from \"./eventexample\";\nconst localizer = momentLocalizer(moment)\n\nclass Calender extends Component {\n  state = {\n    title:\"\",\n    start_date:'',\n    end_date:'',\n    start_time:\"\",\n    end_time:\"\"\n  };\n\n  \n  onSubmit=(e)=>{\n    e.preventDefault()\n   if(this.state.start_date.split(\"-\").length===3 &&\n   this.state.end_date.split(\"-\").length===3 &&\n   this.state.start_time.split(\":\").length===2 &&\n   this.state.end_time.split(\":\").length===2 \n   ) {this.props.addNewEvent(this.state)\n   }\n  }\n\n  handleFormChange=(e)=>{\n    this.setState({\n      [e.target.name]:e.target.value\n    })\n  }\n\n  componentDidMount=()=>{\n    // if(this.props.all_mod_events.length===0){\n      this.props.getModEvents()\n    // }\n  }\n\n  \n\n  eventDatesHelper = async()=>{\n    \n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar/>\n      <div className=\"calender-component\">\n        <div className=\"Calender\">\n          <Calendar\n            \n            localizer={localizer}\n            getNow={() => new Date()}\n            events={this.props.loggedIn_user.user_mod && this.props.loggedIn_user.user_mod.accepted? this.props.all_mod_events :[]}\n            style={{ height: \"40vh\" }}\n          />\n        </div>\n        \n        {this.props.loggedIn_user.user_mod && this.props.loggedIn_user.user_mod.accepted?\n          <div className=\"calender-form\">\n          <form  onSubmit={this.onSubmit}>\n            <div className=\"calender-flex\">\n                <div className=\"start-date\">\n                  <h4>Start date </h4> \n                    <input onChange={this.handleFormChange} value={this.state.title} type=\"text\" name=\"title\" placeholder=\"Event Title\" required/>\n                    <input type=\"date\" onChange={this.handleFormChange} value={this.state.start_date} name=\"start_date\" placeholder=\"Start date(M/dd/YYYY)\" required/>\n                    <input type=\"time\" onChange={this.handleFormChange} value={this.state.start_time} name=\"start_time\" placeholder=\"Start time(HH:MM)\" required/>\n                </div>\n\n                <div className=\"end-date\">\n                  <h4>End date</h4>\n                  <input type=\"date\" onChange={this.handleFormChange} value={this.state.end_date} name=\"end_date\" placeholder=\"End date(M/dd/YYYY)\" required/>\n                  <input type=\"time\" onChange={this.handleFormChange} value={this.state.end_time} name=\"end_time\" placeholder=\"End time(HH:MM)\" required/>\n                </div>\n\n                <UpcommingEvents />\n            </div>\n          <div className=\"event-submit-btn\">\n            <input style={{width:\"150px\", textAlign: \"center\", alignSelf:\"center\"}} className=\"create-event\" type=\"submit\" value=\"create event\" />\n            </div>\n          </form>\n        </div>\n          :\n\n         <div className=\"calender-form\" >\"Not accepted in a Mod yet\" </div>\n        }\n      </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Calender;","import React from 'react'\n\nexport default class ChatBoxForUser extends React.Component{\n   state={\n       text:\"\",\n       user:localStorage.clicked_user\n   }\n\n    loop = setInterval(() => {\n                this.props.getChat(localStorage.clicked_user)\n        },2000)\n\n\n   componentWillUnmount(){\n    clearInterval(this.loop)\n   }\n\n   componentDidUpdate(){\n       if(this.state.user!==localStorage.clicked_user){\n           clearInterval(this.loop)\n           this.loop = setInterval(() => {\n            this.props.getChat(localStorage.clicked_user)\n            var objDiv = document.getElementById(\"test\");\n            objDiv.scrollBottom = objDiv.scrollHeight;\n            }, 20000)\n\n            var objDiv = document.querySelector(\".two-user-messages\")\n      objDiv.scrollTop = objDiv.scrollHeight;\n\n       }\n   }\n\n    handleChatSubmit=(e)=>{\n        e.preventDefault()\n        this.props.sendUserMessage(this.props.chat.id,this.state.text)\n        this.setState({\n          text:\"\"\n        })\n    }\n\n    handleChatInputChange=(e)=>{\n        this.setState({\n            text:e.target.value\n        })\n    }\n\n\n    render(){\n        var objDiv = document.querySelector(\".two-user-messages\")\n      if (objDiv) {objDiv.scrollTop = objDiv.scrollHeight};\n        let messageArr\n            if (this.props.chat.two_users_messages){\n                messageArr=this.props.chat.two_users_messages.map((message)=>{\n                    return <p>{message.sender}-{message.text}</p>\n                })\n            }\n        return(\n            <div className='chat-single'>\n                {this.props.chat.two_users_messages?\n                 <div>\n                    <div id=\"test\" className=\"two-user-messages\">\n                        {messageArr}\n                    </div>\n\n                    <div className=\"two-user-messages-form\">\n                    <form onSubmit={this.handleChatSubmit}>\n                        <input onChange={this.handleChatInputChange} value={this.state.text} type=\"text\" placeholder=\"type your message\" />\n                        <input type=\"submit\" value=\"submit\" />\n                    </form>\n                    </div>\n\n                </div>\n                :\n                null\n                }\n            </div>\n        )\n    }\n}\n\n\n\n\n\n\n\n// {this.props.two_users_chat.two_users_messages.map((message)=>{\n//     return <p>{message.text}</p>\n//     })}\n","import React from 'react'\nimport {connect} from \"react-redux\"\nimport {HEADERS,API} from '../constants/constants'\nimport {getGlobalMessage,sendGlobalMessage} from '../redux/action'\n\nclass GlobalChat extends React.Component{\n\n    state={\n        text:''\n    }\n\n    loop = setInterval(() => {\n      this.props.getGlobalMessage()\n    },2000)\n\n\n componentWillUnmount(){\n  clearInterval(this.loop)\n }\n\n    componentDidMount(){\n        this.props.getGlobalMessage()\n\n        var objDiv = document.querySelector(\".global-messages\")\n        if (objDiv) {objDiv.scrollTop = objDiv.scrollHeight};\n    }\n\n\n\n    handleMessageSubmit=(e)=>{\n        e.preventDefault()\n        fetch(API+\"/global_messages\",{\n            method:\"POST\",\n            headers:{\n              ...HEADERS,\n              \"Authorization\":localStorage.token\n            },\n            body:JSON.stringify(\n             { user_id:localStorage.current_user,\n                text:this.state.text\n              }\n            )\n          })\n          .then(()=>this.setState({text:''}))\n    }\n\n    handleInputChange=(e)=>{\n        this.setState({\n            text:e.target.value\n        })\n    }\n\n    render(){\n        var objDiv = document.querySelector(\".global-messages\")\n        if (objDiv) {objDiv.scrollTop = objDiv.scrollHeight};\n        let messageArr\n        if (this.props.global_messages.length>0){\n            messageArr=this.props.global_messages.map((message)=>{\n                return<p key={message.id}><span className=\"user-name\">{message.user.name}</span>-{message.text}</p>\n            })\n        }\n        return(\n        <React.Fragment>\n          <div className=\"chat-global\">\n\n            <div className=\"global-messages\">\n            {messageArr}\n            </div>\n\n            <div className=\"global-chat-form\">\n            <form onSubmit={this.handleMessageSubmit}>\n                    <input onChange={this.handleInputChange} value={this.state.text} type=\"text\" placeholder=\"type message\" />\n                    <input type=\"submit\" value=\"send\" />\n                </form>\n            </div>\n          </div>\n        </React.Fragment>\n        )\n    }\n}\n\nconst mapStateToProps=(state)=>{\n    \n    return {\n        loggedIn_user : state.loggedIn_user,\n        global_messages:state.global_messages\n    }\n  }\n\n  const mapDispatchToProps = {\n    getGlobalMessage:getGlobalMessage,\n    sendGlobalMessage:sendGlobalMessage\n  }\n\nexport default connect(mapStateToProps,mapDispatchToProps)(GlobalChat)\n","import React from \"react\"\nimport {connect} from 'react-redux'\nimport {getAllFriends,getTwoUsersChat,sendGlobalMessage,getLoggedInUser,sendUserMessage} from '../redux/action'\nimport ChatBoxForUser from \"./ChatBoxForUser\";\nimport GlobalChat from \"./GlobalChat\"\nimport { MDBBtn } from \"mdbreact\";\n\n\nclass Chat extends React.Component {\n\n// loop = setInterval(() => {\n\n//     console.log(\"looping\")\n//     this.props.getAllFriends()\n// },2000)\n\n\n// componentWillUnmount(){\n//     clearInterval(this.loop)\n// }\n\n    componentDidMount(){\n        this.props.getLoggedInUser()\n        this.props.getAllFriends()     \n    }\n\n    state={\n        text:'',\n        clicked:false,\n        global:false\n    }\n\n    handleGlobalClick=()=>{\n        this.setState({\n            global:true,\n            clicked:false\n        })\n    }\n\n\n\n    handleUserClick=(id)=>{\n        localStorage.clicked_user=id\n        this.props.getTwoUsersChat(id)\n        this.setState({\n            clicked:true,\n            global:false\n        })\n        // this.props.history.push(\"/profile\")\n    }\n\n\n    render(){\n        return(\n          <>\n            <div className='chat-container'>\n\n                <div className=\"button-and-name\">\n                <MDBBtn onClick={this.handleGlobalClick} color=\"blue-grey\">Global Chat</MDBBtn>\n                <div>\n                    <h4> ALL FRIENDS</h4>\n                    {this.props.all_friends.map((user)=>\n                    <div className=\"user-name\" key={user.id}>\n                        <div onClick={()=>this.handleUserClick(user.id)}>\n                        {user.active_user?\n                        <img style={{height:\"10px\"}} src=\"http://www.clker.com/cliparts/n/6/E/l/R/n/green-button-blank-md.png\" alt=\"online\"/>\n                        :\n                        <img style={{height:\"10px\"}} src=\"https://t4.rbxcdn.com/febc68c16e64ba11fa26981649a3ecf5\" alt=\"offline\" />\n\n                    }\n                        {user.name}</div>\n                    </div>)}\n                </div>\n\n                </div>\n            </div>\n\n            <div className=\"chat-and-form\">\n                {this.state.clicked?\n\n                <ChatBoxForUser getAllFriends={this.props.getAllFriends} getChat={this.props.getTwoUsersChat} sendUserMessage={this.props.sendUserMessage} chat={this.props.two_users_chat}/>\n                :\n\n                null}\n\n                {this.state.global?\n                <GlobalChat />\n                :\n                null\n                 }\n             </div>\n          </>\n        )\n    }\n\n}\n\n\n\nconst mapStateToProps=(state)=>{\n    return {\n        all_friends:state.all_friends,\n        two_users_chat:state.two_users_chat\n    }\n  }\n\n\n  const mapDispatchToProps = {\n    getAllFriends:getAllFriends,\n    getTwoUsersChat:getTwoUsersChat,\n    getLoggedInUser:getLoggedInUser,\n    sendUserMessage:sendUserMessage,\n    sendGlobalMessage:sendGlobalMessage\n\n  }\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Chat)\n","import React from 'react'\nimport {connect} from 'react-redux'\nimport {} from '../redux/action'\nimport Chat from './Chat'\n\nclass Sidebar extends React.Component{\n    render(){\n        return(\n            <div className=\"side-bar\">\n            <div className=\"profile-in-side-bar\" >\n                {this.props.loggedIn_user.image?\n                <div className='sidebar-header'>\n                    <div> \n                    <img className=\"sidebar-image\" src={this.props.loggedIn_user.image.url} alt=\"profile pic\" />\n                    </div>\n                    <h4>Name:</h4>{this.props.loggedIn_user.name}\n                    <br />\n                    <h4>User Name:</h4>{this.props.loggedIn_user.user_name}\n                </div>\n            :\n            null\n            }\n            </div>\n            <div className=\"friend-list\">\n\n            <Chat />\n            {/* <UpcommingEvents /> */}\n            </div>\n            </div>\n        )\n    }\n}\n\n\nconst mapStateToProps=(state)=>{\n    return {\n        loggedIn_user:state.loggedIn_user\n    }\n}\n\n\nconst mapDispatchToProps = {\n\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Sidebar)\n","import React from 'react'\nimport Navbar from './Navbar'\n// import { ActionCable } from 'react-actioncable-provider';\n\nimport UpcommingEvents from './UpcommingEvents'\nimport Sidebar from './Sidebar'\n\n\n\nexport default class Home extends React.Component{\n\n    state={\n        content:''\n    }\n\n    componentDidMount(){\n        this.props.allTweets()\n        this.props.getModEvents()\n    }\n\n    handleInputChange=(e)=>{\n        this.setState({\n            content:e.target.value\n        })\n    }\n\n    handlePostSubmit=(e)=>{\n        e.preventDefault()\n        this.props.addNewTweet(this.state)\n        this.setState({\n            content:\"\"\n        })\n    }\n\n    handleUserClick=(id)=>{\n        localStorage.clicked_user=id\n        this.props.history.push(\"/profile\")\n    }\n\n    render(){\n        if (!localStorage.token) this.props.history.push(\"/\")\n        let homeTweets=this.props.all_tweets.map((tweet)=> {\n            return <div className=\"each-tweet\"> \n            <span onClick={()=>this.handleUserClick(tweet.user.id)}><span className=\"user-name\">{tweet.user.name}</span></span>\n            -{tweet.content}\n            </div>}\n            )\n        return(\n            <React.Fragment>\n\n                 \n                <Navbar />\n            <div className=\"homepage-container\">\n\n                <div className=\"homepage-tweet-form\">\n                    <form onSubmit={this.handlePostSubmit}>\n                        <input value={this.state.content} onChange={this.handleInputChange} type=\"text\" name=\"content\" placeholder={`What's in mind, ${this.props.loggedIn_user.name}?`} />\n                        <input  type=\"submit\" value=\"post\" />\n                        \n                    </form>\n                    \n\n                    <div className=\"homepage-tweets\">\n                        {homeTweets.reverse()}\n                    </div>\n                </div>\n                \n\n                <div>\n                    <div>\n                <UpcommingEvents />\n                </div>\n\n                <Sidebar />\n                </div>\n                \n            </div>\n\n            </React.Fragment>\n        )\n    }\n}","import React from 'react'\nimport Navbar from './Navbar'\nimport {connect} from 'react-redux'\nimport {getAllUsers,addFriend,getAllFriends,removeFriend} from '../redux/action'\nimport Sidebar from './Sidebar'\n\n\n\nclass FriendList extends React.Component{\n\n    componentDidMount(){\n        this.props.getAllFriends()\n        this.props.getAllUsers()\n    }\n\n\n    handleAddFriend=(id)=>{\n        this.props.addFriend(localStorage.current_user,id)\n    }\n\n    handleRemoveFriend=(id)=>{\n        this.props.removeFriend(localStorage.current_user,id)\n    }\n\n    handleUserClick=(id)=>{\n        localStorage.clicked_user=id\n        this.props.history.push(\"/profile\")\n    }\n\n    render(){\n        let arrOfFriendsId=this.props.all_friends.map((user)=>user.id)\n        let notfriend=this.props.all_users.filter((user)=>!(arrOfFriendsId.includes(user.id) || user.id===parseInt(localStorage.current_user) ))\n        return(\n            <React.Fragment>\n                    <Navbar />\n                <div className=\"friend-list-component\" >\n                    <div className=\"all-friends-friendlist\">\n                        <h4>ALL FRIENDS</h4>\n                    {this.props.all_friends.map((user)=>\n                        <div className=\"each-user-friends\">\n                            <div onClick={()=>this.handleUserClick(user.id)}>\n                                {user.active_user?\n                                <img style={{height:\"10px\"}} src=\"http://www.clker.com/cliparts/n/6/E/l/R/n/green-button-blank-md.png\" alt=\"online\"/>\n                                :\n                                <img style={{height:\"10px\"}} src=\"https://t4.rbxcdn.com/febc68c16e64ba11fa26981649a3ecf5\" alt=\"offline\" />\n\n                                }\n                                <span className=\"user-name\">{user.name}</span>\n                            </div>\n                            <button className=\"add-remove-friend\" onClick={()=>this.handleRemoveFriend(user.id)}> Remove Friend</button>\n                        </div>)}\n                    </div>\n\n                    \n                    \n                    <div className=\"all-users\">\n                        <h4>ALL USERS</h4>\n                    {notfriend.map((user)=>\n                    <div className=\"each-user-friends\">\n                        <div onClick={()=>this.handleUserClick(user.id)}>\n                        {user.active_user?\n                        <img style={{height:\"10px\"}} src=\"http://www.clker.com/cliparts/n/6/E/l/R/n/green-button-blank-md.png\" alt=\"online\"/>\n                        :\n                        <img style={{height:\"10px\"}} src=\"https://t4.rbxcdn.com/febc68c16e64ba11fa26981649a3ecf5\" alt=\"offline\" />\n\n                    }\n                        <span className=\"user-name\">{user.name}</span>\n                        </div>\n                        <button className=\"add-remove-friend\" onClick={()=>this.handleAddFriend(user.id)}>ADD FRIEND</button>\n                        </div>)}\n                    </div>\n                </div>\n\n\n                <Sidebar />\n\n            </React.Fragment>\n        )\n    }\n}\n\n\nconst mapStateToProps=(state)=>{\n    return {\n        all_users:state.all_users,\n        all_friends:state.all_friends\n    }\n  }\n\n  const mapDispatchToProps = {\n    getAllUsers:getAllUsers,\n    getAllFriends:getAllFriends,\n    addFriend:addFriend,\n    removeFriend:removeFriend\n  }\n\nexport default connect(mapStateToProps,mapDispatchToProps)(FriendList)\n","import React from 'react'\nimport {connect} from 'react-redux'\nimport {getAllImage,changeProfilePic} from '../redux/action'\nimport { MDBContainer, MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter } from 'mdbreact';\n\n\n\nclass ProfilPic extends React.Component{\n\n\n    state = {\n        modal14: false\n      }\n      \n      toggle = nr => () => {\n        let modalNumber = 'modal' + nr\n        this.setState({\n          [modalNumber]: !this.state[modalNumber]\n        });\n      }\n\n    componentDidMount(){\n        this.props.getAllImage()\n    }\n\n    handlePpChange=(id)=>{\n        this.props.changeProfilePic(id)\n    }\n\n    render(){\n        let arr=this.props.all_image.map(image=>{\n            return <img onClick={(e)=>this.handlePpChange(image.id)} key={image.id} className=\"each-profile-pic\" src={image.url} alt=\"profile pic\" />\n        })\n        return(\n            <React.Fragment>\n            <MDBContainer style={{margin:\"0\", padding:\"0\"}}>\n        <MDBBtn color=\"primary\" onClick={this.toggle(14)}>Change ProfilePic</MDBBtn>\n        <MDBModal isOpen={this.state.modal14} toggle={this.toggle(14)} centered>\n          <MDBModalHeader toggle={this.toggle(14)}>Pictures</MDBModalHeader>\n          <MDBModalBody>\n          {arr}\n          </MDBModalBody>\n          <MDBModalFooter>\n            <MDBBtn color=\"secondary\" onClick={this.toggle(14)}>Close</MDBBtn>\n\n          </MDBModalFooter>\n        </MDBModal>\n      </MDBContainer>\n            </React.Fragment>\n        )\n    }\n}\n\n\nconst mapStateToProps=(state)=>{\n    return {\n        all_image:state.all_image\n    }\n  }\n  \n  const mapDispatchToProps = {\n    getAllImage:getAllImage,\n    changeProfilePic:changeProfilePic\n  }\n  \nexport default connect(mapStateToProps,mapDispatchToProps)(ProfilPic)\n  ","import React from 'react'\nimport {connect} from 'react-redux'\nimport {getCurrentUser,troggleWorking,addBlog} from '../redux/action'\nimport Navbar from './Navbar';\nimport ProfilePic from './ProfilPic'\n// import { MDBBtn } from \"mdbreact\";\n\n\n\nclass Profile extends React.Component{\n    state={\n        checked:false,\n        title:'',\n        url:'',\n        ppChange:false\n    }\n\n    handleCheckboxChange=()=>{\n    if (localStorage.clicked_user===localStorage.current_user){\n        this.props.troggleWorking()\n        this.setState({\n            checked:!this.state.checked\n        })\n    }\n    }\n\n    componentDidMount(){\n        this.props.getCurrentUser()\n        \n    }\n\n    handleBlogFormInput=(e)=>{\n    if (localStorage.clicked_user===localStorage.current_user){\n        this.setState({\n            [e.target.name]:e.target.value\n        })\n    }\n    }\n\n    handleBlogFormSubmit=(e)=>{\n    e.preventDefault()\n    if (localStorage.clicked_user===localStorage.current_user){\n        this.props.addBlog(this.state.title, this.state.url)\n    }\n    }\n\n    handleProfileChangeClick=()=>{\n        if(localStorage.clicked_user===localStorage.current_user){\n\n            this.setState({\n                ppChange:true\n            })\n        }\n    }\n\n    handleProfileChangeClose=()=>{\n        this.setState({\n            ppChange:false\n        })\n    }\n\n\n\n    render(){\n        let userTweet=[]\n        let userBlogs=[]\n        const { user_name, name,working_at}=this.props.current_user\n        if(this.props.current_user && this.state.checked!==this.props.current_user.working){\n            this.setState({\n                checked:this.props.current_user.working\n            })\n\n        }\n\n        if(this.props.current_user.tweets && this.props.current_user.blogs){\n            userTweet= this.props.current_user.tweets.map(tweets => <div className=\"each-tweet\"> {tweets.content}</div>)\n            userBlogs=this.props.current_user.blogs.map((blog,i)=> {\n            return <a href= {blog.url} >{`${i+1})`} {blog.title} </a>})\n        }\n\n\n\n        return(\n        <React.Fragment>\n                <Navbar/>\n        <div className=\"profile-container\">\n                {this.state.ppChange?\n                <ProfilePic handleProfileChangeClose={this.handleProfileChangeClose} />\n                    :\n                    null\n            }\n\n                <img className=\"profile-picture\" src={this.props.current_user.image? this.props.current_user.image.url :\"https://pbs.twimg.com/profile_images/1149340751265980417/s0j8V4p3_400x400.png\" } alt=\"default pic\"></img>\n                {localStorage.clicked_user===localStorage.current_user?\n                    <ProfilePic onClick={this.handleProfileChangeClick} handleProfileChangeClose={this.handleProfileChangeClose} />                \n                :\n                null \n                }\n                <div className=\"profile-detail\" >\n                    <div>name:{name}</div>\n                    <div>user Name:{user_name}</div>\n                    <div>working:\n\n                    <input style={{width:\"10px\"}} type=\"checkbox\" onChange={this.handleCheckboxChange} checked={this.state.checked}></input>\n\n                    </div>\n                    <div>working_at:{working_at}</div>\n\n                </div>\n\n            <div className=\"blog-and-tweet\">\n                <div className=\"profile-tweets\">\n                    TWEETS\n                    {userTweet}\n                </div>\n\n\n                <div className=\"profile-blogs-and-form\">\n                    <div className=\"profile-blogs\">\n                    BLOGS <br/>\n                        {userBlogs}\n                    </div>\n\n                    <div className=\"profile-blog-form\">\n                        {localStorage.clicked_user===localStorage.current_user?\n                        <form onSubmit={this.handleBlogFormSubmit}>\n                            <input onChange={this.handleBlogFormInput} value={this.state.title} type=\"text\" placeholder=\"title\" name=\"title\"  />\n                            <input onChange={this.handleBlogFormInput} value={this.state.url} type=\"text\" placeholder=\"url\" name=\"url\"  />\n                            <input type=\"submit\" value=\"post new blog\" />\n\n                        </form>\n                        :\n                        null\n                    \n                    }\n                    </div>\n                </div>\n            </div>\n\n\n        </div> \n        </React.Fragment>\n        )\n    }\n}\n\n\n\nconst mapStateToProps=(state)=>{\n    return {\n        current_user:state.current_user\n    }\n  }\n  \n  const mapDispatchToProps = {\n    getCurrentUser:getCurrentUser,\n    troggleWorking:troggleWorking,\n    addBlog:addBlog\n  }\n  \nexport default connect(mapStateToProps,mapDispatchToProps)(Profile)\n  ","import React from 'react'\nimport {connect} from 'react-redux'\nimport {getAllMod,getMyMod,getLoggedInUser,editCurrentUser} from '../redux/action'\nimport NavBar from './Navbar'\n\n\n class Setting extends React.Component{\n    state={\n        user_id:localStorage.current_user,\n        name:'',\n        user_name:'',\n        working_at:'',\n        password:'',\n        mod_id:localStorage.mod_id\n    }\n\n    handleFormChange=(e)=>{\n        this.setState({\n            [e.target.name] : e.target.value\n        })\n    }\n\n    handleSelectChange=(e)=>{\n        this.setState({\n            mod_id: e.target.value\n        })\n    }\n\n     refreshPage() {\n        // window.location.reload(false);\n      }\n\n    componentDidMount(){\n        this.props.getAllMod()\n        this.props.getLoggedInUser()\n    }\n\n    handleSubmit= (e)=>{\n        e.preventDefault()\n        this.props.editCurrentUser(this.state)\n        // this.setState({\n        // name:'',\n        // user_name:'',\n        // working_at:'',\n        // password:''\n        // })\n        alert(\"saves changed\")\n        // this.props.getLoggedInUser()\n    }\n\n\n    render(){\n        return(\n            <React.Fragment>\n                <NavBar />\n            <div className=\"edit-form-container\">\n                <form className=\"edit-form\"  onSubmit={this.handleSubmit}>\n                    <div>\n                        Name:<input onChange={this.handleFormChange} type=\"text\" value={this.state.name} name=\"name\" placeholder={this.props.loggedIn_user.name} />\n                    </div>\n                    <div>\n                        User Name:<input onChange={this.handleFormChange} type=\"text\" value={this.state.user_name} name=\"user_name\" placeholder={this.props.loggedIn_user.user_name} />\n                    </div>\n                    <div>\n                        Working At<input onChange={this.handleFormChange} type=\"text\" value={this.state.working_at} name=\"working_at\" placeholder={this.props.loggedIn_user.working_at} />\n                    </div>\n                    <div>\n                        Password:<input onChange={this.handleFormChange} type=\"password\" value={this.state.password} name=\"password\" />\n                    </div>\n                    <div>\n                        Mod <select onChange={this.handleSelectChange} value={this.state.mod_id}>\n                        {this.props.all_mod.map((mod)=> <option value={mod.id}>{mod.name}</option> )}\n                        </select>\n                    </div>\n                    <input type=\"submit\" value=\"edit\" />\n                </form>\n            </div>\n            </React.Fragment>\n        )\n    }\n}\n\n\n\nconst mapStateToProps=(state)=>{\n    return {\n        all_mod:state.all_mod,\n        my_mod:state.my_mod,\n        loggedIn_user:state.loggedIn_user,\n    }\n  }\n  \n  const mapDispatchToProps = {\n    getAllMod:getAllMod,\n    getMyMod:getMyMod,\n    getLoggedInUser:getLoggedInUser,\n    editCurrentUser:editCurrentUser,\n  }\n  \nexport default connect(mapStateToProps,mapDispatchToProps)(Setting)\n  ","import React from \"react\"\nimport Navbar from './Navbar'\nimport {connect} from 'react-redux'\nimport Sidebar from './Sidebar'\nimport { MDBBtn } from \"mdbreact\";\nimport {createNewMod,getAllMod,getPendingModUser,acceptModUser,rejectModUser} from '../redux/action'\n\nclass Admin extends React.Component {\n  state={\n    mod_name:''\n  }\n\n\n  handleInput=(e)=>{\n    this.setState({\n      [e.target.name]:e.target.value\n    })\n  }\n\n  componentDidMount(){\n    this.props.getAllMod()\n    this.props.getPendingModUser()\n  }\n\n  handleSubmit=(e)=>{\n    e.preventDefault()\n    this.props.createNewMod(this.state)\n\n  }\n\n  handleUserAccept=(id)=>{\n    // debugger\n    this.props.acceptModUser({id:id})\n  }\n\n  handleUserReject=(id)=>{\n    this.props.rejectModUser({id:id})\n  }\n\nrender(){\n    return(\n        <React.Fragment>\n          <Navbar></Navbar>\n          <div className=\"my-mod_component\" >\n            <div className=\"my-mod-form\">\n              <form onSubmit={this.handleSubmit}>\n              <h4>Create Mod</h4>\n              <input onChange={this.handleInput} value={this.state.mod_name} type=\"text\" name=\"mod_name\" placeholder=\"New Mod Name\" />\n              <input type=\"submit\" value=\"create new mod\" />\n              </form>\n            </div>\n\n\n          <div className=\"admin-all-mod\">\n            <h4>ALL MOD</h4>\n            <ul>\n            {this.props.all_mod.map((mod)=>{\n              return <div>{mod.name}</div>\n            })}\n            </ul>\n          </div>\n\n\n          <div className=\"admin-pending-req\">\n           <h4> PENDING USER FOR MOD</h4>\n            <ul>\n            {this.props.all_pending_user.map((user_mod)=>{\n              return <div> <div className=\"user-name\">{user_mod.user.name}</div>-----{user_mod.mod.name}\n              <br />\n              <MDBBtn style={{height:\"30px\",padding:\"0\", width:\"56px\"}} onClick={()=>this.handleUserAccept(user_mod.id)} rounded color=\"secondary\">ACCEPT</MDBBtn>\n              <MDBBtn style={{height:\"30px\",padding:\"0\", width:\"56px\"}} onClick={()=>this.handleUserReject(user_mod.id)} rounded color=\"danger\">REJECT</MDBBtn>\n              </div>\n            })}\n            </ul>\n          </div>  \n                \n\n          </div>\n          <Sidebar />\n        </React.Fragment>\n    )\n}\n}\n\n\nconst mapStateToProps=(state)=>{\n    return {\n      all_mod:state.all_mod,\n      all_pending_user:state.all_pending_user\n    }\n  }\n\n\n  const mapDispatchToProps = {\n    createNewMod:createNewMod,\n    getAllMod:getAllMod,\n    getPendingModUser:getPendingModUser,\n    acceptModUser:acceptModUser,\n    rejectModUser:rejectModUser\n\n  }\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Admin)\n","import React from 'react'\nimport {connect} from 'react-redux'\nimport {getModFriends,getAllModTweets,createModTweets} from '../redux/action'\nimport Navbar from './Navbar'\nimport UpcommingEvent from './UpcommingEvents'\nimport Sidebar from './Sidebar'\n\n\nclass MyMode extends React.Component{\n\n    state={\n        content:\"\"\n    }\n\n    componentDidMount(){\n        this.props.getModFriends()\n        this.props.getAllModTweets(localStorage.mod_id)\n    }\n\n    componentDidUpdate(){\n        \n        var objDiv = document.querySelector(\".tweets\")\n        if(objDiv) objDiv.scrollTop = objDiv.scrollHeight;\n    }\n\n    handleUserClick=(id)=>{\n        localStorage.clicked_user=id\n        this.props.history.push(\"/profile\")\n    }\n\n    handleInputChange=(e)=>{\n        this.setState({\n            content:e.target.value\n        })\n    }\n\n    handlePostSubmit=(e)=>{\n        e.preventDefault()\n        this.props.createModTweets(this.state.content)\n        this.setState({\n            content:\"\"\n        })\n\n    }\n    render(){\n        let arr=this.props.all_mod_friends.filter((user)=>{\n            // debugger\n            return user.user_mod.accepted\n        //    return parseInt(user.id)!==parseInt(localStorage.current_user)\n        // return user\n        })\n        let modName\n\n        if (this.props.loggedIn_user.mod){\n            modName=this.props.loggedIn_user.mod.name\n        }\n         arr=arr.map((user)=>{\n           return <li className=\"user-name\" onClick={()=>this.handleUserClick(user.id)}>{user.name}</li>\n        })\n        return(\n            <React.Fragment>\n                <Navbar />\n                \n                {this.props.loggedIn_user.user_mod && this.props.loggedIn_user.user_mod.accepted? \n                <div>\n                <h3 className=\"mod-name\">{modName}</h3>\n                <div className=\"my-mod_component\">\n                \n                <div className=\"mod_users\">\n                    <ul>\n                        All mod friends\n                        <br />\n                        {arr.length>0? arr : \"No one in this mod\"}\n                    </ul>\n                </div>\n\n\n                <div className=\"mod-tweets\">\n                    <div className=\"tweets\">\n                        Mod Tweets\n                        <ul>\n                        {this.props.all_mod_tweets.map(tweet=><li><span onClick={()=>this.handleUserClick(tweet.user.id)} className=\"user-name\">{tweet.user.name}</span>-{tweet.content}</li>)}\n                        </ul>\n                    </div>\n\n                    <div className=\"mod-tweet-form\">\n                    <form onSubmit={this.handlePostSubmit}>\n                                <input value={this.state.content} onChange={this.handleInputChange} type=\"text\" name=\"content\" placeholder={`What's in mind, ${this.props.loggedIn_user.name}?`} />\n                                <input type=\"submit\" value=\"post\" />\n                            </form>\n                    </div>\n                    <div className=\"upcomming-event\">\n                </div>\n                </div>\n                    <UpcommingEvent />\n\n\n\n               \n               </div>\n               </div>\n               :\n               <div className=\"not-accepted\">You are not yet accepted in a mod\n                    <br/>\n                Talk to your instructors about it.\n                </div>\n            }\n               <Sidebar />\n            </React.Fragment>\n        )\n    }\n}\n\n\nconst mapStateToProps=(state)=>{\n    return {\n        all_mod_friends:state.all_mod_friends,\n        loggedIn_user:state.loggedIn_user,\n        all_mod_tweets:state.all_mod_tweets\n    }\n  }\n\n  const mapDispatchToProps = {\n    getModFriends:getModFriends,\n    getAllModTweets:getAllModTweets,\n    createModTweets:createModTweets\n  }\n\nexport default connect(mapStateToProps,mapDispatchToProps)(MyMode)\n","import React from 'react';\nimport './App.css';\nimport Login from './component/Login'\nimport Register from './component/Register'\nimport Calender from './component/Calender'\nimport Home from './component/Home'\nimport FriendList from './component/FriendList'\nimport Profile from './component/Profile'\nimport Setting from './component/Setting'\nimport Admin from './component/Admin'\nimport Chat from './component/Chat'\nimport { Switch, Route } from 'react-router-dom'\nimport {connect} from 'react-redux'\nimport {login,register,sendGlobalMessage, allTweets,getAllFriends,getModEvents,addNewEvent,addNewTweet} from './redux/action'\nimport MyMode from './component/MyMode';\n// import { ActionCable } from 'react-actioncable-provider';\n\n\n\n\nclass App extends React.Component {\n\n  handleLoginSubmit=(state)=>{\n    this.props.login(state)\n  }\n\n  handleRegisterSubmit=(state)=>{\n    this.props.register(state)\n  }\n\n\n  processEventDates=()=>{\n    let arr=[...this.props.all_mod_events]\n    return arr.map((data) =>{\n     return{\n       start:data.start,\n       end:data.end,\n       allDay:false,\n       title:data.title\n     }\n   })\n  }\n\n//   onConnected = () => {\n//     // console.log(\"I'm connected\")\n//   }\n\n//   onDisconnected = () => {\n//   }\n\n//   handleReceivedMessage=(data)=>{\n//     // if (data.id===this.props.global_messages[this.props.global_messages.length-1].id){\n//       // this.props.sendGlobalMessage(data)\n//     // }\n// }\n\n  render() {\n    return (\n      <React.Fragment>\n            {/* <ActionCable\n          key={localStorage.current_user}\n            channel={{ channel: 'GlobalMessagesChannel', user: localStorage.current_user }}\n            onReceived={this.handleReceivedMessage}\n            onConnected={this.onConnected}\n            onDisconnected={this.onDisconnected}\n        /> */}\n      <Switch>\n        <Route exact path='/' render={(routerProps)=> <Login  {...routerProps} handleLoginSubmit={this.handleLoginSubmit} />} />\n        <Route exact path='/calender' render={(routerProps)=> <Calender addNewEvent={this.props.addNewEvent} loggedIn_user={this.props.loggedIn_user} getModEvents={this.props.getModEvents} all_mod_events={this.processEventDates()}  {...routerProps}  />} />\n        <Route exact path='/home' render={(routerProps)=> <Home loggedIn_user={this.props.loggedIn_user} allTweets={this.props.allTweets} addNewTweet={this.props.addNewTweet} getModEvents={this.props.getModEvents} all_tweets={this.props.all_tweets}   {...routerProps}  /> } />\n        <Route exact path='/friends' render={(routerProps)=> <FriendList all_friends={this.props.all_friends} getAllFriends={this.props.getAllFriends}  {...routerProps}  />} />\n        <Route  path='/register' render={(routerProps)=> <Register  {...routerProps} handleRegisterSubmit={this.handleRegisterSubmit} />} />\n        <Route  path='/profile' render={(routerProps)=> <Profile  {...routerProps}  />} />\n        <Route  path='/mymod' render={(routerProps)=> <MyMode  {...routerProps}  />} />\n        <Route  path='/setting' render={(routerProps)=> <Setting  {...routerProps}  />} />\n        <Route  path='/admin' render={(routerProps)=> <Admin  {...routerProps}  />} />\n        <Route  path='/chat' render={(routerProps)=> <Chat  {...routerProps}  />} />\n\n      </Switch>\n      </React.Fragment>\n    )\n  }\n}\n\n\n\nconst mapStateToProps=(state)=>{\n  return {\n    current_user:state.current_user,\n    all_tweets:state.all_tweets,\n    all_friends:state.all_friends,\n    all_mod_events:state.all_mod_events,\n    loggedIn_user:state.loggedIn_user,\n    global_messages:state.global_messages\n  }\n}\n\nconst mapDispatchToProps= {\n    login:login,\n    register:register,\n    allTweets:allTweets,\n    getAllFriends:getAllFriends,\n    getModEvents:getModEvents,\n    addNewEvent:addNewEvent,\n    addNewTweet:addNewTweet,\n    sendGlobalMessage:sendGlobalMessage\n  }\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {LOGIN,REGISTER,ADD_NEW_TWEET,ALL_TWEETS,FRIEND_LIST,GET_MOD_EVENTS,ADD_NEW_EVENT,GET_MOD_FRIENDS,GET_ALL_MOD,GET_MY_MOD,GET_CURRENT_USER,EDIT_CURRENT_USER,CREATE_NEW_MOD,GET_PENDING_MOD_USER,ACCEPT_PENDING_USER,REJECT_PENDING_USER,ALL_USERS,ADD_FRIEND,REMOVE_FRIEND,TROGGLE_WORKING,ADD_BLOG,GET_LOGGED_IN_USER,GET_TWO_USERS_CHAT,SEND_USER_MESSAGE,GET_GLOBAL_MESSAGE,SEND_GLOBAL_MESSAGE,GET_ALL_MOD_TWEETS,CREATE_MOD_TWEET,GET_ALL_IMAGE,CHANGE_PROFILE_PIC} from './type.js'\n\nconst initialState={\n    current_user:{},\n    loggedIn_user:{user_mod:{accepted:false}},\n    all_tweets:[],\n    events:[],\n    mod_tweets:[],\n    all_friends:[],\n    all_mod_events:[],\n    all_mod_friends:[],\n    all_mod:[],\n    my_mod:{},\n    all_pending_user:[],\n    all_users:[],\n    two_users_chat:[],\n    global_messages:[],\n    all_mod_tweets:[],\n    all_image:[]\n\n}\n\nexport default function reducer(state=initialState,action){\n    switch (action.type){\n        case LOGIN:\n            return{...state,\n            current_user:action.payload\n            }\n        case REGISTER:\n            return{\n                ...state,\n                current_user:action.payload\n            }\n        case ALL_TWEETS:\n            return{\n                ...state,\n                all_tweets:action.payload\n            }\n        case FRIEND_LIST:\n            return{\n                ...state,\n                all_friends:action.payload\n            }\n        case GET_MOD_EVENTS:\n            return{\n                ...state,\n                all_mod_events:action.payload\n            }\n        case ADD_NEW_EVENT:\n            return{\n                ...state,\n                all_mod_events:[...state.all_mod_events,action.payload]\n            }\n        case ADD_NEW_TWEET:\n            return{\n                ...state,\n                all_tweets:[...state.all_tweets,action.payload]\n            }\n        case GET_MOD_FRIENDS:\n            return{\n                ...state,\n                all_mod_friends:action.payload\n            }\n        case GET_ALL_MOD:\n            return {\n                ...state,\n                all_mod:action.payload\n            }\n        case GET_MY_MOD:\n            return{\n                ...state,\n                my_mod:action.payload\n            }\n        case GET_CURRENT_USER:\n            return{\n                ...state,\n                current_user:action.payload\n            }\n        case EDIT_CURRENT_USER:\n            return{\n                ...state,\n                current_user:action.payload\n            }\n        case CREATE_NEW_MOD:\n            return{\n                ...state,\n                all_mod:[...state.all_mod,action.payload]\n            }\n\n        case GET_PENDING_MOD_USER:\n        return{\n            ...state,\n            all_pending_user:action.payload\n\n        }\n        case ACCEPT_PENDING_USER:\n            return{\n                ...state,\n                all_pending_user:action.payload\n            }\n        case REJECT_PENDING_USER:\n            return{\n                ...state,\n                all_pending_user:action.payload\n            }\n        case ALL_USERS:\n            return{\n                ...state,\n                all_users:action.payload\n            }\n        case ADD_FRIEND:\n            return{\n                ...state,\n                all_friends:[...state.all_friends,action.payload]\n            }\n        case REMOVE_FRIEND:\n            return{\n                ...state,\n                all_friends:action.payload\n            }\n        case TROGGLE_WORKING:\n            return{\n                ...state,\n                current_user:action.payload\n            }\n        case ADD_BLOG:\n            return{\n                ...state,\n                current_user:{\n                    ...state.current_user,\n                    blogs:[...state.current_user.blogs,action.payload]\n                }\n            }\n        case GET_LOGGED_IN_USER:\n            return{\n                ...state,\n                loggedIn_user:action.payload\n            }\n        case GET_TWO_USERS_CHAT:\n            return{\n                ...state,\n                two_users_chat:action.payload\n            }\n        case SEND_USER_MESSAGE:\n            return{\n                ...state,\n                two_users_chat:{\n                    ...state.two_users_chat,\n                    two_users_messages:[...state.two_users_chat.two_users_messages,action.payload]\n\n                }\n            }\n        case GET_GLOBAL_MESSAGE:\n            return{\n                ...state,\n                global_messages:action.payload\n            }\n        case SEND_GLOBAL_MESSAGE:\n            return{\n                ...state,\n                global_messages:[...state.global_messages,action.payload]\n            }\n        case GET_ALL_MOD_TWEETS:\n            return{\n                ...state,\n                all_mod_tweets:action.payload\n            }\n        case CREATE_MOD_TWEET:\n            return{\n                ...state,\n                all_mod_tweets:[...state.all_mod_tweets,action.payload]\n            }\n        case GET_ALL_IMAGE:\n            return{\n                ...state,\n                all_image:action.payload\n            }\n        case CHANGE_PROFILE_PIC:\n            // debugger\n            return{\n                ...state,\n                current_user:{...state.current_user,\n                    image:action.payload\n                }\n            }\n        default:\n            return state\n        \n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ActionCableProvider } from 'react-actioncable-provider';\nimport {Provider} from 'react-redux'\nimport thunk from 'redux-thunk'\nimport {HashRouter} from 'react-router-dom'\nimport {createStore, applyMiddleware, compose } from 'redux'\nimport reducer from './redux/reducer';\nimport {API_WS_ROOT} from './constants/constants'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));\n\n\nReactDOM.render(<HashRouter><Provider store={store}><App /></Provider></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n// #for action cable\n\n// {/* <ActionCableProvider url={API_WS_ROOT} ></ActionCableProvider> */}\n// +`?user=${localStorage.current_user}`"],"sourceRoot":""}